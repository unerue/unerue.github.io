Traceback (most recent call last):
  File "C:\Users\unerue\miniconda3\envs\jupyterbook\lib\site-packages\jupyter_cache\executors\utils.py", line 58, in single_nb_execution
    executenb(
  File "C:\Users\unerue\miniconda3\envs\jupyterbook\lib\site-packages\nbclient\client.py", line 1204, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
  File "C:\Users\unerue\miniconda3\envs\jupyterbook\lib\site-packages\nbclient\util.py", line 84, in wrapped
    return just_run(coro(*args, **kwargs))
  File "C:\Users\unerue\miniconda3\envs\jupyterbook\lib\site-packages\nbclient\util.py", line 62, in just_run
    return loop.run_until_complete(coro)
  File "C:\Users\unerue\miniconda3\envs\jupyterbook\lib\asyncio\base_events.py", line 647, in run_until_complete
    return future.result()
  File "C:\Users\unerue\miniconda3\envs\jupyterbook\lib\site-packages\nbclient\client.py", line 663, in async_execute
    await self.async_execute_cell(
  File "C:\Users\unerue\miniconda3\envs\jupyterbook\lib\site-packages\nbclient\client.py", line 965, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "C:\Users\unerue\miniconda3\envs\jupyterbook\lib\site-packages\nbclient\client.py", line 862, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
def _create_problem(self, dmu):
    prob = LpProblem('DMU{}'.format(dmu), LpMaximize)

    self.input_weights = LpVariable.dicts('input_weight', (), lowBound=, upBound=None)
    self.output_weights = LpVariable.dicts('output_weight', (), lowBound=, upBound=None)

    if self.return_to_scale == 'CCR':
        w = 0
    elif self.return_to_scale == 'BCC':
        w = LpVariable.dicts('w', ())
    elif self.return_to_scale == 'AR':
        pass
    else:
        raise ValueError('Return to scale')

    # Set up objective function
    prob += LpAffineExpression([(self.output_weights[j0][r1], self.outputs.values[j0][r1]) for r1 in self._r]) - w

    # Set up constraints
    prob += LpAffineExpression([(self.input_weights[j0][i1], self.inputs.values[j0][i1]) for i1 in self._i]) == 1, "Norm_constraint"

    for j1 in self._j:
        prob += self._dmu_constraint(j0, j1) - \
            w <= 0, ''.join(['DMU_constraint_', str(j1)])
    return prob
------------------

[1;36m  Cell [1;32mIn[1], line 4[1;36m[0m
[1;33m    self.input_weights = LpVariable.dicts('input_weight', (), lowBound=, upBound=None)[0m
[1;37m                                                                       ^[0m
[1;31mSyntaxError[0m[1;31m:[0m invalid syntax

SyntaxError: invalid syntax (573414175.py, line 4)

