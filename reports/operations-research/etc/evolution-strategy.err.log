Traceback (most recent call last):
  File "C:\Users\unerue\miniconda3\envs\jupyterbook\lib\site-packages\jupyter_cache\executors\utils.py", line 58, in single_nb_execution
    executenb(
  File "C:\Users\unerue\miniconda3\envs\jupyterbook\lib\site-packages\nbclient\client.py", line 1204, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
  File "C:\Users\unerue\miniconda3\envs\jupyterbook\lib\site-packages\nbclient\util.py", line 84, in wrapped
    return just_run(coro(*args, **kwargs))
  File "C:\Users\unerue\miniconda3\envs\jupyterbook\lib\site-packages\nbclient\util.py", line 62, in just_run
    return loop.run_until_complete(coro)
  File "C:\Users\unerue\miniconda3\envs\jupyterbook\lib\asyncio\base_events.py", line 647, in run_until_complete
    return future.result()
  File "C:\Users\unerue\miniconda3\envs\jupyterbook\lib\site-packages\nbclient\client.py", line 663, in async_execute
    await self.async_execute_cell(
  File "C:\Users\unerue\miniconda3\envs\jupyterbook\lib\site-packages\nbclient\client.py", line 965, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "C:\Users\unerue\miniconda3\envs\jupyterbook\lib\site-packages\nbclient\client.py", line 862, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
import numpy as np


class EvolutionStrategy:
    def __init__(self, sigma, lower_bound, upper_bound, max_iter):
        self.sigma = sigma
        self.lower_bound = lower_bound
        self.upper_bound = upper_bound
        self.max_iter = max_iter
        self.history = {'fitness': [], 'solution': []}
        
    def _generate(self):
        # =RAND()*(b-a)+a
        p = np.random.rand()*(self.upper_bound-self.lower_bound)+self.lower_bound
        return p
    
    def _check_range(self, x):
        if self.lower_bound <= x <= self.upper_bound:
            return True
    
    def _fitness(self, x):
        return x**2 * np.sin(x)**6.0
    
    def optimize(self):
        p = (self._generate(), self.sigma) # (p, sigma)
        while self.max_iter:
            o = (p[0] + np.random.normal(0, p[1]), p[1])
            if self._check_range(o[0]):
                if self._fitness(p[0]) < self._fitness(o[0]):
                    p = o
                else:
                    p = p
            else:
                pass
                
            self.history['fitness'].append(self._fitness(p[0]))
            self.history['solution'].append(p[0])
            self.max_iter -= 1        
------------------

[1;31m---------------------------------------------------------------------------[0m
[1;31mModuleNotFoundError[0m                       Traceback (most recent call last)
Cell [1;32mIn[1], line 1[0m
[1;32m----> 1[0m [38;5;28;01mimport[39;00m [38;5;21;01mnumpy[39;00m [38;5;28;01mas[39;00m [38;5;21;01mnp[39;00m
[0;32m      4[0m [38;5;28;01mclass[39;00m [38;5;21;01mEvolutionStrategy[39;00m:
[0;32m      5[0m     [38;5;28;01mdef[39;00m [38;5;21m__init__[39m([38;5;28mself[39m, sigma, lower_bound, upper_bound, max_iter):

[1;31mModuleNotFoundError[0m: No module named 'numpy'
ModuleNotFoundError: No module named 'numpy'

